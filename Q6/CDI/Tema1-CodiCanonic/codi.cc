#include <map>
#include <string>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool compara (const pair<char, int>& a, const pair <char, int>& b){
    if (a.second != b.second) return a.second < b.second;
    return a.first < b.first;
}

void codiCanonic(map<char, string>& CharToCod, map<string, char>& CodToChar, const vector<pair<char, int>>& codi) {
    string codificacio = "";
    int anterior = 0;
    
    //Fem el primer codi, sabem que son tots zeros
    codificacio = string(codi[0].second, '0');  //Tants 0s com longitud
    CharToCod[codi[0].first] = codificacio;
    CodToChar[codificacio] = codi[0].first;
    anterior = codi[0].second;
    
    for (int i = 1; i < codi.size(); ++i) {
        int num = 0;
        // Convertim la codificació anterior a decimal
        for (char c : codificacio) {
            num = (num << 1) + (c - '0');
        }
        num++;
        
        // Per comprovar que la longitud no es menor, es multiplica per 2 el binari, es a dir, un desplaçament
        while (anterior < codi[i].second) {
            num = num << 1;
            anterior++;
        }
        
        // Pasem el numero a binari
        codificacio = "";
        int aux = num;
        for (int j = 0; j < codi[i].second; ++j) {
            codificacio = char('0' + (aux & 1)) + codificacio;
            aux >>= 1;
        }
        
        // Guardem la codificació
        CharToCod[codi[i].first] = codificacio;
        CodToChar[codificacio] = codi[i].first;
        anterior = codi[i].second;
    }
}

//Funció per codificar el missatge
string encode (map<char, string>& CharToCod, const string& missatge){
    string s = "";
    for (char m : missatge){
        s += CharToCod[m];
    }
    return s;
}

//Funció per decodificar el missatge
string decode (map <string, char>& CodToChar, const string& missatge){
    string s ="";
    string CodAct = "";
    for (int i = 0; i < missatge.size(); ++i){
        CodAct += missatge[i];
        if (CodToChar.find(CodAct) != CodToChar.end()){
            s += CodToChar[CodAct];
            CodAct = "";
        }
    }
    return s;
}


int main () {
    vector<pair<char, int>> codi = {
        {' ', 3}, {'!', 8}, {'\'', 9}, {',', 5}, {'-', 9}, {'.', 6}, 
        {';', 10}, {'?', 8}, {'B', 10}, {'D', 10}, {'G', 8}, {'H', 7}, 
        {'I', 7}, {'M', 9}, {'P', 10}, {'T', 8}, {'W', 9}, {'Y', 11}, 
        {'[', 11}, {']', 10}, {'a', 4}, {'b', 7}, {'c', 6}, {'d', 4}, 
        {'e', 3}, {'f', 6}, {'g', 7}, {'h', 4}, {'i', 5}, {'k', 7}, {'l', 5}, 
        {'m', 5}, {'n', 4}, {'o', 4}, {'p', 6}, {'r', 5}, {'s', 5}, {'t', 4}, 
        {'u', 6}, {'v', 7}, {'w', 6}, {'x', 9}, {'y', 6}
    };
    //Ordenem la entrada
    sort(codi.begin(), codi.end(), compara);

    //Crea codificacio
    map <char, string> CharToCod;
    map <string, char> CodToChar;

    //Creem el codi canonic corresponent
    codiCanonic(CharToCod, CodToChar, codi);

    string missatge

    //cout << encode(CharToCod, missatge);
    cout << decode(CodToChar, missatge);

}
